services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: backend
    depends_on:
      - postgres
      - redis
    # Gunicorn listens on 8000 within the docker network
    expose:
      - "8000"
    # Set up environment variables for production
    environment:
      - PROD=True
      - DJANGO_SETTINGS_MODULE=backend.settings_prod
      - DJANGO_SECRET_KEY=nac85TVxkmqCk30nseDgenkVWFk9F1e1fBjAycJ9
      - DJANGO_DEBUG=False
      - DJANGO_ALLOWED_HOSTS=igym.vikingthe.dev,localhost
      - DJANGO_SECURE_SSL_REDIRECT=True
      - CORS_ALLOWED_ORIGINS=https://igym.vikingthe.dev,https://localhost
      - POSTGRES_DB=igym_db
      - POSTGRES_USER=igym
      - POSTGRES_PASSWORD=iGymAdmin6789
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - REDIS_CACHE_URL=redis://redis:6379/0
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - CSRF_TRUSTED_ORIGINS=https://igym.vikingthe.dev,https://localhost
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
      - seeded_volume:/app/seeded
    networks:
      - nginx-backend
      - backend-postgres
      - backend-redis
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
    depends_on:
      - backend
    # We expose port 3000 for the frontend within the docker network
    expose:
      - "3000"
    # If we need environment variables, we can pass them in here
    environment:
      #- BACKEND_API_URL=https://igym.vikingthe.dev/api
      #- VITE_BACKEND_API_URL=https://igym.vikingthe.dev/api
      #- BACKEND_WS_URL=wss://igym.vikingthe.dev/api
      #- VITE_BACKEND_WS_URL=wss://igym.vikingthe.dev/api
      - MODE=production
    networks:
      - nginx-frontend
    restart: unless-stopped

  # This is the Nginx proxy that will handle SSL termination
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: nginx
    depends_on:
      - backend
      - frontend
    # Open ports for HTTPS (and HTTP for redirection to HTTPS). 
    # This will be the only entrance point for the application.
    ports:
      - "443:443"
      - "80:80"
    volumes:
      - ./nginx/ssl/certificate.crt:/etc/ssl/certs/certificate.crt:ro
      - ./nginx/ssl/certificate.key:/etc/ssl/private/certificate.key:ro
      - static_volume:/usr/share/nginx/html/static
      - media_volume:/usr/share/nginx/html/media
    networks:
      - nginx-frontend
      - nginx-backend
    restart: unless-stopped

  postgres:
    image: postgres:latest
    container_name: postgres
    environment:
      # Set up the initial database user, password, and database.
      - POSTGRES_USER=igym
      - POSTGRES_PASSWORD=iGymAdmin6789
      - POSTGRES_DB=igym_db
    expose:
      # We just need to expose the port for the backend to connect to the database.
      - "5432:5432"
    volumes:
      # Persist the database data.
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend-postgres
    restart: unless-stopped
  redis:
    image: redis:latest
    container_name: redis
    expose:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - backend-redis
    restart: unless-stopped

# Volumes for persistent data storage and to share data between containers
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  static_volume:
    driver: local
  media_volume:
    driver: local
  seeded_volume:
    driver: local

# Set up multiple networks for better isolation
# This ensures that i.e. the frontend cannot access the database directly
# and only the backend can access the database and redis.
networks:
  nginx-frontend:
    driver: bridge
  nginx-backend:
    driver: bridge
  backend-postgres:
    driver: bridge
  backend-redis:
    driver: bridge
  